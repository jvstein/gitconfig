#!/usr/bin/env bash
# Script for returning all the large files that have committed to a repo.

usage() {
    echo "git bigfiles [-h] [-s MIN_SIZE]"
    exit 1
}

ONLY_HEAD=0
MIN_SIZE=0

while getopts "hos:" flag
do
    case "$flag" in
        h)  usage ;;
        o)  ONLY_HEAD=1 ;;
        s)  MIN_SIZE=${OPTARG} ;;
        *)  ;;
    esac
done

# From: https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history
git rev-list --objects --all \
| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
| sed -n 's/^blob //p' \
| ( [[ $ONLY_HEAD -eq 1 ]] && grep -vF --file=<(git ls-tree -r HEAD | awk '{print $3}') || cat) \
| ( [[ $MIN_SIZE -ne 0 ]] && awk "\$2 >= $MIN_SIZE" || cat ) \
| sort --numeric-sort --key=2 \
| cut -c 1-12,41- \
| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
